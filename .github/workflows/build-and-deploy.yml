---
name: ECS deploy workflow

on:
  create:
    tags:
      - "v*.*.*"
  # pull_request:
  #   branches:
  #     - master
  #     - main

env:
  AWS_REGION: eu-central-1
  ECS_SERVICE: MY_ECS_SERVICE
  ECS_CLUSTER: MY_ECS_CLUSTER
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION

jobs:
  build:
    name: Build a docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Read metadata
        id: metadata
        uses: ./.github/actions/metadata-reader

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.3.3

      - name: Deploy the cloudformation ECR stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: "${{ steps.metadata.outputs.platform }}-${{ steps.metadata.outputs.system }}-${{ steps.metadata.outputs.subsystem }}-stack"
          template: ./.aws/ecr.yml
          capabilities: "CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND"
          no-fail-on-empty-changeset: "1"
          parameter-overrides: "Name=${{ steps.metadata.outputs.platform }}/${{ steps.metadata.outputs.system }}-${{ steps.metadata.outputs.subsystem }}-repo2"
          tags: |
            [
              { "Key": "Environment", "Value": "prod" },
              { "Key": "Platform", "Value": "${{ steps.metadata.outputs.platform }}" },
              { "Key": "System", "Value": "${{ steps.metadata.outputs.system }}" },
              { "Key": "Subsystem", "Value": "${{ steps.metadata.outputs.subsystem }}" },
              { "Key": "Owner", "Value": "${{ steps.metadata.outputs.owner }}" },
              { "Key": "Provisioner", "Value": "cloudformation" }
            ]

      - name: Docker meta information
        id: docker-meta
        uses: docker/metadata-action@v3
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: "${{ steps.metadata.outputs.platform }}/${{ steps.metadata.outputs.system }}-${{ steps.metadata.outputs.subsystem }}-repo2"
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: build-image
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: "APP_NAME=${{ steps.metadata.outputs.target }}"
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: my-container
          image: ${{ steps.build-image.outputs.imageid }}
